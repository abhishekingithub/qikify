"""Qikify charting helper functions.
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.font_manager
from matplotlib import cm
import scipy.stats as st 

def synthetic_and_real(s_data, b_data, d1, d2, filename=None):
    """2D Scatterplot of synthetic & actual data.
    """
    _, ax = plt.subplots(1)
    ax.scatter(s_data[:, d1], s_data[:, d2], alpha=0.5, c='r')
    ax.scatter(b_data[:, d1], b_data[:, d2], alpha=0.5, c='g')
    if filename is None:
        plt.show()
    else:
        plt.savefig(filename, dpi = 150, format='pdf')  
    plt.close()


def histogram(s_data, b_data, i, filename=None):
    """overlay two histograms.
    """
    _, ax = plt.subplots(1)
    ax.hist(s_data[:, i], 50, normed=True, alpha=0.5, color='r')
    ax.hist(b_data[:, i], 50, normed=True, alpha=0.5, color='g')
    ax.grid(True)
    
    if filename is None:
        plt.show()
    else:
        plt.savefig(filename, dpi = 150, format='pdf')
    plt.close()    


def yp_vs_y(yp, y, filename=None):
    """
    This method plots y predicted vs. y actual on a 45-degree chart.
    """
    miny = min(min(y), min(yp))
    maxy = max(max(y), max(yp))
    fig = plt.figure()
    ax  = fig.add_subplot(111, aspect='equal')
    ax.scatter(yp, y)
    ax.plot([miny, maxy], [miny, maxy])
    ax.set_xlim((miny, maxy))
    ax.set_ylim((miny, maxy))
    ax.grid(True)
    if filename is None:
        plt.show()
    else:
        plt.savefig(filename, dpi = 150, format='pdf')    
    plt.close()


def qq(x, filename=None): 
    """Quartile-Quartile plot, similar to Rstats qq() function."""   
    fig = plt.figure()
    ax  = fig.add_subplot(111)
    osm, osr = st.probplot(x, fit=0, dist='norm')  # compute 
    ax.plot(osm, osr, '.')
    ax.grid(True)
    if filename is None:
        plt.show()
    else:
        plt.savefig(filename, dpi = 150, format='pdf')    
    plt.close()


def coef_path(coefs, filename=None):
    """
    Plot the coefficient paths generated by elastic net / lasso.
    """
    fig = plt.figure()
    ax  = fig.add_subplot(111)
    ax.set_color_cycle(2 * ['b', 'r', 'g', 'c', 'k'])
    plt.plot(coefs)
    plt.xlabel('-Log(lambda)')
    plt.ylabel('weights')
    plt.title('Lasso and Elastic-Net Paths')
    plt.axis('tight')
    if filename is None:
        plt.show()
    else:
        plt.savefig(filename, dpi = 150, format='pdf')


def pairs(data, filename=None):
    """Generates something similar to R pairs() plot.
    """
    n_vars = data.shape[1]
    fig = plt.figure()
    for i in range(n_vars):
        for j in range(n_vars):
            ax = fig.add_subplot(n_vars, n_vars, i * n_vars + j + 1)
            if i == j:
                ax.hist(data[:, i])
            else:
                ax.scatter(data[:, i], data[:, j])
            ax.autoscale(True)
    if filename is None:
        plt.show()
    else:
        plt.savefig(filename, dpi = 150, format='pdf')
    plt.close()


def te_and_yl(error, error_syn, filename=None):
    """Plot test escapes and yield loss comparison chart, from ICCAD 2011 paper.
    """
    [te_syn, yl_syn]       = np.mean(error_syn, 0)
    [te_actual, yl_actual] = np.mean(error, 0)
    n_wafers = np.size(error, 0)
    
    prop    = matplotlib.font_manager.FontProperties(size=10)
    fig     = plt.figure()
    
    # Test escapes plot
    ax      = fig.add_subplot(211)
    ax.plot(error[:, 0], 'k-')
    ax.plot([0, n_wafers], [te_syn, te_syn], 'g--')
    ax.plot([0, n_wafers], [te_actual, te_actual], 'k-')
    ax.grid(True)
    ax.set_title('Test Escapes')
    ax.legend((r"$T_E$", r"$\hat{T}_E$", r"$\bar{T}_E$"), \
                'best', shadow=True, prop = prop)
    
    # Yield loss plot                 
    ax   = fig.add_subplot(212)
    ax.plot(error[:, 1], 'k-', [0, n_wafers], [yl_syn, yl_syn], 'g--', \
                               [0, n_wafers], [yl_actual, yl_actual], 'k-')
    ax.grid(True)
    ax.set_title('Yield Loss')
    ax.legend((r"$Y_L$", r"$\hat{Y}_L$", r"$\bar{Y}_L$"), \
                'best', shadow=True, prop = prop)

    if filename is None:
        plt.show()  
    else:
        plt.savefig(filename, dpi = 150, format='pdf')
    plt.close()



def wafer_map(x, y, val, filename=None):
    """Plots a heatmap of argument val over wafer coordinates.
    """
    x = np.array(x, dtype=int)
    y = np.array(y, dtype=int)
    val = np.array(val, dtype=float)
    
    xmax, ymax = max(x), max(y)
    wafer = np.ones((xmax, ymax)) * np.nan
    for i in range(len(x)):
        xc, yc, C = x[i], y[i], val[i]
        wafer[xc-1, yc-1] = C

    fig  = plt.figure()
    ax1  = fig.add_subplot(111)
    cax  = ax1.imshow(wafer.T, cm.RdYlGn, \
                      vmin=val.min(), \
                      vmax=val.max(), \
                      interpolation='nearest')
    fig.colorbar(cax)
    
    if filename is None:
        plt.show()
    else:
        plt.savefig(filename, dpi = 150, format='pdf')
