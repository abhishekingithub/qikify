#!/usr/bin/python
'''
Copyright (c) 2011 Nathan Kupp, Yale University.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
'''

import csv
from ConfigParser import ConfigParser
from glob import glob
from random import sample

import qikify.helpers.general as helpers
from qikify.models.Specs import Specs
from qikify.models.DatasetTI import DatasetTI
from qikify.controllers.kde import KDE
from qikify.controllers.lsfs import LSFS
from qikify.controllers.svm import SVM

''' 
Global parameters controlling the run.
K_INNER/K_OUTER together form a region based on specification boundaries that encloses so-called "critical" training
instances, or devices which lie directly near the decision boundary between passing and failing.

By defining this region, we can artificially enhance the population with synthetic device observations to reduce the
variance of the decision boundary generated by the classifier. Thus, we have a KDE_COUNTS dictionary with counts of 
devices to generate in each region: good, critical, faulty.

Finally, T_L is a threshold on the Laplacian scores determining how many features are retained during feature
selection. Lower T_L --> less features retained.
'''
K_INNER, K_OUTER = 5.5/6, 6.5/6
KDE_COUNTS       = dotdict({'nGood': 15000, 'nCritical': 5000, 'nFail': 5000})
T_L              = 0.01


'''
Controller class instances.
These controllers comprise the core of Qikify. The objective is to make DataStructs the currency of Qikify, whereby 
all controllers can pass DataStruct instances to each other and perform analysis on the data enclosed within.

  * config is just a simple wrapper allowing configuration settings to be read from an input file. 
  * specs manages reading in specifications (LSL, USL pairs) and creating an associated specification dictionary.
  * lsfs is a Laplacian score feature selection controller enable dimensionality reduction.
  * kde is a non-parametric kernel density estimation controller to generate synthetic populations of devices.
  * svm is a support vector machine controller which simply wraps scikits.learn.svm with a convenience class.
'''
config = ConfigParser(); config.read('settings.conf.example')
specs  = Specs(config.get('Settings', 'specFile')).genCriticalRegion(K_INNER, K_OUTER)
lsfs   = LSFS.LSFS()
kde    = KDE.KDE()
svm    = SVM.SVM()

if __name__ == "__main__":
    # A list of data files
    dataFiles = glob(config.get('Settings', 'dataFiles'))
    
    # Read in the first file, compute its pass/fail values based on specifications.
    baseData  = Dataset(dataFiles[0]).computePF(specs)
    print baseData
    
    # Run supervised Laplacian score feature selection with the base dataset
    lsfs.run(baseData['raw'].data, baseData['raw'].gnd)
    lsfs.subset(T_L)
    
    # Construct synthetic dataset to train classifier on.
    synthetic = kde.run(baseData['raw'], specs, counts=KDE_COUNTS)   
    synData   = Dataset(data=synthetic).computePF(specs)
    
    # Train SVM
    svm.train(synData['raw'].data, synData['raw'].gnd, gridSearch=True)
    
    # Go through everything else and get test escape and yield loss error metrics
    # obtained by application of the SVM model.
    result = []
    for dataFile in dataFiles[1:len(dataFiles)]:
        newData    = Dataset(dataFile)
        predicted  = svm.predict(newData['raw'].subsetCols(lsfs.Subset).data)
        result.append(svm.getTEYL(newData['raw'].gnd, predicted))
    print result
    

