// Generated by CoffeeScript 1.3.1
var DOMInteractions, Section,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

DOMInteractions = (function() {

  DOMInteractions.name = 'DOMInteractions';

  function DOMInteractions(name) {
    this.name = name;
    this.remove = __bind(this.remove, this);

    this.inject = __bind(this.inject, this);

    this.isRendered = false;
    this.id = Raphael.createUUID();
  }

  DOMInteractions.prototype.inject = function(parentID, content) {
    this.parentID = parentID;
    if (!this.isRendered) {
      this.isRendered = true;
      return $(parentID).append(content);
    }
  };

  DOMInteractions.prototype.remove = function() {
    if (this.id != null) {
      return $("#" + this.parentID).children(this.id).remove();
    }
  };

  return DOMInteractions;

})();

Section = (function(_super) {

  __extends(Section, _super);

  Section.name = 'Section';

  function Section(name, header, subheader, hasStatSection) {
    this.name = name;
    this.header = header;
    this.subheader = subheader;
    this.hasStatSection = hasStatSection;
    this.inject = __bind(this.inject, this);

    Section.__super__.constructor.apply(this, arguments);
    console.log(window.today + (" *** Section() - " + this.name + " " + this.id));
    this.sectionHTML = "<section id=\"" + this.id + "\">\n    <div class=\"page-header\">\n        <h1>" + this.header + " <small>" + this.subheader + "</small></h1>\n    </div>\n</section>";
    this.inject('#main');
    if (this.hasStatSection) {
      this.statSection = new StatCollection(this.name, this.id);
    }
  }

  Section.prototype.inject = function(parentID) {
    console.log(window.today + " *** Section.inject");
    return Section.__super__.inject.call(this, parentID, this.sectionHTML);
  };

  return Section;

})(DOMInteractions);
