// Generated by CoffeeScript 1.3.1
var DOMInteractions, Parameter, Section, Statistic,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

DOMInteractions = (function() {

  DOMInteractions.name = 'DOMInteractions';

  function DOMInteractions(name) {
    this.name = name;
    this.remove = __bind(this.remove, this);

    this.inject = __bind(this.inject, this);

    this.isRendered = false;
    this.id = Raphael.createUUID();
  }

  DOMInteractions.prototype.inject = function(parentID, content) {
    this.parentID = parentID;
    if (!this.isRendered) {
      this.isRendered = true;
      return $('#' + this.parentID).append(content);
    }
  };

  DOMInteractions.prototype.remove = function() {
    if (this.id != null) {
      return $("#" + this.parentID).children(this.id).remove();
    }
  };

  return DOMInteractions;

})();

Statistic = (function(_super) {

  __extends(Statistic, _super);

  Statistic.name = 'Statistic';

  function Statistic(name, parentID) {
    this.name = name;
    this.parentID = parentID;
    this.update = __bind(this.update, this);

    Statistic.__super__.constructor.apply(this, arguments);
    console.log(window.today + (" *** Statistic() - " + this.name + " " + this.id));
    this.statHTML = "<p class=\"stat\" id=" + this.id + ">\n    <span class=\"stat-label\"></span>\n    <span class=\"stat-value\"></span>\n</p>";
    this.inject(this.parentID, this.statHTML);
  }

  Statistic.prototype.update = function(msg) {
    console.log(window.today + (" *** Statistic.update " + msg.desc + " - " + msg.value));
    $('#' + this.id + ' > span.stat-label').text(msg.desc + ':');
    return $('#' + this.id + ' > span.stat-value').text(msg.value);
  };

  return Statistic;

})(DOMInteractions);

Parameter = (function(_super) {

  __extends(Parameter, _super);

  Parameter.name = 'Parameter';

  function Parameter(name, desc, parentID) {
    this.name = name;
    this.desc = desc;
    this.parentID = parentID;
    this.update = __bind(this.update, this);

    Parameter.__super__.constructor.apply(this, arguments);
    console.log(window.today + " *** Parameter()");
    this.stats_id = Raphael.createUUID();
    this.chart_id = Raphael.createUUID();
    this.parmHTML = "<div class=\"row\">\n<div class=\"span16\"><h2>" + this.desc + "</h2></div>\n<div class=\"span5\"  id=\"" + this.stats_id + "\"></div>\n<div class=\"span11\" id=\"" + this.chart_id + "\" style=\"min-width: 400px; height: 150px; margin: -5px auto\"></div></div>";
    this.inject(this.parentID, this.parmHTML);
    this.stat = new Statistic(this.name, this.stats_id);
    this.chart = new HLineChart(this.chart_id);
  }

  Parameter.prototype.update = function(par) {
    console.log(window.today + " *** Parameter().update()");
    this.stat.update({
      'desc': 'Current Value',
      'value': par.value
    });
    return this.chart.update(par.value);
  };

  return Parameter;

})(DOMInteractions);

Section = (function(_super) {

  __extends(Section, _super);

  Section.name = 'Section';

  function Section(name, header, subheader) {
    var _this = this;
    this.name = name;
    this.header = header;
    this.subheader = subheader;
    Section.__super__.constructor.apply(this, arguments);
    console.log(window.today + (" *** Section() - " + this.name + " " + this.id));
    this.sectionHTML = "<section id=\"" + this.id + "\">\n    <div class=\"page-header\">\n        <h1>" + this.header + " <small>" + this.subheader + "</small></h1>\n    </div>\n    \n</section>";
    this.inject('main', this.sectionHTML);
    this.parms = {};
    window.socket.on('message', function(v) {
      var k, par, _ref, _results;
      if (v.name === _this.name) {
        _ref = v.parms;
        _results = [];
        for (k in _ref) {
          par = _ref[k];
          if (!_this.parms.hasOwnProperty(k)) {
            _this.parms[k] = new Parameter("" + _this.name + ":" + k, par.desc, _this.id);
          }
          _results.push(_this.parms[k].update(par));
        }
        return _results;
      }
    });
  }

  return Section;

})(DOMInteractions);
