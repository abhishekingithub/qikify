// Generated by CoffeeScript 1.3.1
var StatCollection, Statistic,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

Statistic = (function(_super) {

  __extends(Statistic, _super);

  Statistic.name = 'Statistic';

  function Statistic(name) {
    this.name = name;
    this.update = __bind(this.update, this);

    this.inject = __bind(this.inject, this);

    Statistic.__super__.constructor.apply(this, arguments);
    console.log(window.today + (" *** Statistic() - " + this.name + " " + this.id));
    this.statHTML = "<p class=\"stat\" id=" + this.id + ">\n    <span class=\"stat-label\"></span>\n    <span class=\"stat-value\"></span>\n</p>";
  }

  Statistic.prototype.inject = function(parentID) {
    console.log(window.today + " *** Statistic.inject");
    return Statistic.__super__.inject.call(this, parentID, this.statHTML);
  };

  Statistic.prototype.update = function(msg) {
    console.log(window.today + (" *** Statistic.update " + msg.desc + " - " + msg.value));
    $('#' + this.id + ' > span.stat-label').text(msg.desc + ':');
    return $('#' + this.id + ' > span.stat-value').text(msg.value);
  };

  return Statistic;

})(DOMInteractions);

StatCollection = (function() {

  StatCollection.name = 'StatCollection';

  function StatCollection(name, parentID) {
    var _this = this;
    this.name = name;
    this.parentID = parentID;
    this.inject = __bind(this.inject, this);

    this.id = Raphael.createUUID();
    console.log(window.today + (" *** StatCollection() - " + this.name + " " + this.id));
    this.isRendered = false;
    this.stats = {};
    this.statHTML = "<div class=\"row statistics\" id = \"" + this.id + "\">\n  <div class=\"span16\">\n    <h2>Statistics</h2>\n  </div>\n</div>";
    window.socket.on('message', function(v) {
      var k, p, par, _ref, _results;
      if (v.name === _this.name) {
        if (!_this.isRendered) {
          $('#' + _this.parentID).append(_this.statHTML);
          _this.isRendered = true;
          _this.inject('#' + _this.parentID + ' > .statistics > div', (function() {
            var _results;
            _results = [];
            for (p in v.parms) {
              _results.push(p);
            }
            return _results;
          })());
        }
        _ref = v.parms;
        _results = [];
        for (k in _ref) {
          par = _ref[k];
          _results.push(_this.stats[k].update(par));
        }
        return _results;
      }
    });
  }

  StatCollection.prototype.inject = function(parentID, parms) {
    var k, s, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = parms.length; _i < _len; _i++) {
      k = parms[_i];
      s = new Statistic("" + this.name + ":" + k);
      s.inject(parentID);
      _results.push(this.stats[k] = s);
    }
    return _results;
  };

  return StatCollection;

})();
