// Generated by CoffeeScript 1.3.1
var BarChart, Chart, ChartCollection, LineChart,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

Chart = (function(_super) {

  __extends(Chart, _super);

  Chart.name = 'Chart';

  function Chart(name, description) {
    this.name = name;
    this.inject = __bind(this.inject, this);

    Chart.__super__.constructor.apply(this, arguments);
    this.chart_id = Raphael.createUUID();
    console.log(window.today + (" *** Chart() - " + this.name + " " + this.id));
    this.chartHTML = "<div class=\"row\" id=\"" + this.id + "\">\n  <div class=\"span5\">\n    <h2>" + this.name + "</h2> \n    " + description + "\n  </div>\n  <div class=\"span11\" id=\"" + this.chart_id + "\"></div>\n</div>";
  }

  Chart.prototype.inject = function(parentID) {
    console.log(window.today + " *** Chart.inject");
    Chart.__super__.inject.call(this, parentID, this.chartHTML);
    return this.canvas = Raphael($("#" + this.chart_id)[0], 640, 180);
  };

  return Chart;

})(DOMInteractions);

BarChart = (function(_super) {

  __extends(BarChart, _super);

  BarChart.name = 'BarChart';

  function BarChart() {
    this.plot = __bind(this.plot, this);
    return BarChart.__super__.constructor.apply(this, arguments);
  }

  BarChart.prototype.plot = function(data) {
    return this.canvas.barchart(0, 0, 640, 180, [data.x], 0, {
      type: "square"
    });
  };

  return BarChart;

})(Chart);

LineChart = (function(_super) {

  __extends(LineChart, _super);

  LineChart.name = 'LineChart';

  function LineChart() {
    this.plot = __bind(this.plot, this);
    return LineChart.__super__.constructor.apply(this, arguments);
  }

  LineChart.prototype.plot = function(data) {
    return this.canvas.linechart(0, 0, 640, 180, data.x, data.y);
  };

  return LineChart;

})(Chart);

ChartCollection = (function() {

  ChartCollection.name = 'ChartCollection';

  function ChartCollection(name) {
    var barData, i, lineData, x, y;
    this.name = name;
    barData = {
      "x": [55, 20, 13, 32, 5, 1, 2, 10, 55, 20, 13, 32, 5, 1, 2, 10, 55, 20, 13, 32, 5, 1, 2, 10]
    };
    x = [];
    y = [];
    i = 0;
    while (i !== 1e3) {
      x[i] = i * 10;
      y[i] = (y[i - 1] || 0) + (Math.random() * 7) - 3;
      i += 1;
    }
    lineData = {
      x: x,
      y: y
    };
  }

  ChartCollection.prototype.add = function(name) {
    return console.log('add');
  };

  ChartCollection.prototype.remove = function(name) {
    return console.log('remove');
  };

  return ChartCollection;

})();
